;; Standard library for TON FunC contracts
;; This is a minimal stdlib implementation for Unite Protocol

;; Basic types and constants
const int null() = 0;

;; Cell operations
int cell_hash(cell c) asm "HASHCU";
slice begin_parse(cell c) asm "CTOS";
(slice, cell) load_ref(slice s) asm "LDREF";
(slice, int) load_uint(slice s, int len) asm(s len -> 1 0) "LDUX";
(slice, int) load_int(slice s, int len) asm(s len -> 1 0) "LDIX";
(slice, slice) load_msg_addr(slice s) asm "LDMSGADDR";
(slice, int) load_coins(slice s) asm "LDVARUINT16";
int slice_hash(slice s) asm "HASHSU";
int slice_empty?(slice s) asm "SEMPTY";
int equal_slices(slice a, slice b) asm "SDEQ";

;; Builder operations
builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
builder store_uint(builder b, int x, int len) asm(x b len) "STUX";
builder store_int(builder b, int x, int len) asm(x b len) "STIX";
builder store_slice(builder b, slice s) asm "STSLICER";
builder store_ref(builder b, cell c) asm "STREF";
builder store_coins(builder b, int x) asm "STVARUINT16";
builder store_dict(builder b, cell c) asm "STDICT";
builder store_maybe_ref(builder b, cell c) asm "STOPTREF";

;; Dictionary operations
cell new_dict() asm "NEWDICT";
(cell, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUFGET" "NULLSWAPIFNOT";
(cell, int) udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUFSET";
(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUFDELETE";
(cell, int, slice, int) udict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2 -1) "DICTUFGETNEXT" "NULLSWAPIFNOT2";

;; String operations
int string_hash(slice s) asm "SHA256U";

;; Time
int now() asm "NOW";

;; Contract operations
slice my_address() asm "MYADDR";
int my_balance() asm "BALANCE" "FIRST";
slice get_data() asm "c4 PUSHCTR";
() set_data(cell c) impure asm "c4 POPCTR";
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";

;; Exceptions
() throw(int excno) impure asm "THROW";
() throw_unless(int excno, int cond) impure asm "THROWARGIFNOT";
() throw_if(int excno, int cond) impure asm "THROWARGIF";

;; Advanced operations
slice preload_ref(slice s) asm "PLDREF" "CTOS";
(slice, ()) skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";