#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";

;; MockUSDT Jetton Master Contract
;; Standard Jetton implementation with additional mint functionality for testing

;; Storage structure:
;; total_supply uint(120)
;; admin_address slice
;; jetton_content cell
;; jetton_wallet_code cell

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_msg_addr(), ;; admin_address  
        ds~load_ref(), ;; jetton_content
        ds~load_ref()  ;; jetton_wallet_code
    );
}

() save_data(int total_supply, slice admin_address, cell jetton_content, cell jetton_wallet_code) impure inline {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_ref(jetton_content)
        .store_ref(jetton_wallet_code)
        .end_cell());
}

() mint_tokens(slice to_address, int amount, slice from_address, int query_id, int ton_amount) impure {
    var (total_supply, admin_address, jetton_content, jetton_wallet_code) = load_data();
    
    ;; Anyone can mint for testing purposes
    total_supply += amount;
    save_data(total_supply, admin_address, jetton_content, jetton_wallet_code);

    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(ton_amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell()
            .store_uint(0x178d4519, 32) ;; internal_transfer
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(from_address)
            .store_slice(from_address) ;; response_address
            .store_coins(0) ;; forward_ton_amount
            .store_uint(0, 1) ;; forward_payload in this slice, not separate cell
            .end_cell())
        .end_cell();
    send_raw_message(msg, 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (total_supply, admin_address, jetton_content, jetton_wallet_code) = load_data();

    if (op == 21) { ;; mint
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int ton_amount = master_msg_cs~load_coins();
        
        mint_tokens(to_address, amount, sender_address, query_id, ton_amount);
        return ();
    }

    if (op == 3) { ;; change_admin
        throw_unless(ERROR_UNAUTHORIZED, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, jetton_content, jetton_wallet_code);
        return ();
    }

    if (op == 4) { ;; change_content
        throw_unless(ERROR_UNAUTHORIZED, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, int, slice, cell, cell) get_jetton_data() method_id {
    var (total_supply, admin_address, jetton_content, jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, jetton_content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    var (_, _, _, jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

int get_total_supply() method_id {
    var (total_supply, _, _, _) = load_data();
    return total_supply;
}