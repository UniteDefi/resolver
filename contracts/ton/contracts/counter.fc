#include "imports/stdlib.fc";

;; Storage
;; int32 counter

int load_data() impure {
    var ds = get_data().begin_parse();
    return ds~load_int(32);
}

() save_data(int counter) impure {
    set_data(
        begin_cell()
            .store_int(counter, 32)
            .end_cell()
    );
}

;; Receive internal messages
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    int counter = load_data();
    
    if (op == 1) { ;; increment
        counter += 1;
        save_data(counter);
    } elseif (op == 2) { ;; decrement
        counter -= 1;
        save_data(counter);
    }
}

;; Get methods

int get_counter() method_id {
    int counter = load_data();
    return counter;
}